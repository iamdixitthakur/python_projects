import PyPDF2
import sys
import os
import glob  # The glob module in Python is used for file and directory pattern matching

code_directory = os.getcwd()

def Pdf_Combiner():
    merger = PyPDF2.PdfMerger()
    
    #-------------
    os.chdir("../")
    print("Current Directory:", os.getcwd())
    search_directory = "input"
    matching_directory = glob.glob(f"*{search_directory}",recursive=True)    
    if matching_directory:
        current_directory=matching_directory[0]
        os.chdir(current_directory)
        print(f"Changed to Directory: {os.getcwd()}")
    else:
        print(f"No directory named '{search_directory}' found.")
    #-------------
    files = [os.path.basename(f) for f in glob.glob(f"{os.getcwd()}/*")]
    print(files)
    for pdf in files:
        print(pdf)
        merger.append(pdf)
    #-------------
    os.chdir("../")
    print("Current Directory:", os.getcwd())
    search_directory = "output"
    matching_directory = glob.glob(f"*{search_directory}",recursive=True)    
    if matching_directory:
        current_directory=matching_directory[0]
        os.chdir(current_directory)
        print(f"Changed to Directory: {os.getcwd()}")
    else:
        print(f"No directory named '{search_directory}' found.")

    merger.write("super.pdf")


Pdf_Combiner()
os.chdir(code_directory)
print("Current Directory:", os.getcwd())
print(f"file has been merged successfully and the current working directory is {os.getcwd()}")



#theory for this code


'''The `glob` module in Python is used for file and directory pattern matching, similar to how wildcards are used in command-line interfaces. It finds all the pathnames that match a specified pattern according to the rules used by the Unix shell. 

### Key Features of `glob`:
- **Wildcard Matching**: It allows you to search for files and directories using wildcards like `*` (matches any number of characters), `?` (matches a single character), and `[]` (matches characters within a range).
- **Recursive Search**: You can search for files and directories within subdirectories by using the `**` wildcard with the `recursive=True` option.
  

### Common Wildcards:
- `*`: Matches any number of characters (e.g., `*.txt` matches all `.txt` files).
- `?`: Matches exactly one character (e.g., `file?.txt` matches `file1.txt` but not `file10.txt`).
- `[]`: Matches any character inside the brackets (e.g., `file[1-3].txt` matches `file1.txt`, `file2.txt`, `file3.txt`).

'''
# example
"""
import glob

# Find all Python files in the current directory
python_files = glob.glob('*.py')
print(python_files)

# Find all .txt files in any subdirectory
text_files = glob.glob('**/*.txt', recursive=True)
print(text_files)

# Find all directories named "data" in any subdirectory
data_directories = glob.glob('**/data', recursive=True)
print(data_directories)
"""
